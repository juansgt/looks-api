// Code generated by MockGen. DO NOT EDIT.
// Source: ..\model-test\dataAccess\lookRepository\lookRepository.go

// Package mock_lookRepository is a generated GoMock package.
package mock_lookRepository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lookRepository "github.com/juansgt/looks-model/v3/dataAccess/lookRepository"
)

// MockILookRepository is a mock of ILookRepository interface.
type MockILookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILookRepositoryMockRecorder
}

// MockILookRepositoryMockRecorder is the mock recorder for MockILookRepository.
type MockILookRepositoryMockRecorder struct {
	mock *MockILookRepository
}

// NewMockILookRepository creates a new mock instance.
func NewMockILookRepository(ctrl *gomock.Controller) *MockILookRepository {
	mock := &MockILookRepository{ctrl: ctrl}
	mock.recorder = &MockILookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILookRepository) EXPECT() *MockILookRepositoryMockRecorder {
	return m.recorder
}

// FindLooks mocks base method.
func (m *MockILookRepository) FindLooks() []lookRepository.Look {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLooks")
	ret0, _ := ret[0].([]lookRepository.Look)
	return ret0
}

// FindLooks indicates an expected call of FindLooks.
func (mr *MockILookRepositoryMockRecorder) FindLooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLooks", reflect.TypeOf((*MockILookRepository)(nil).FindLooks))
}
