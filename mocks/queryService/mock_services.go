// Code generated by MockGen. DO NOT EDIT.
// Source: ..\generics\services\queryService.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIQueryService is a mock of IQueryService interface.
type MockIQueryService[TQuery any, TResult any] struct {
	ctrl     *gomock.Controller
	recorder *MockIQueryServiceMockRecorder[TQuery, TResult]
}

// MockIQueryServiceMockRecorder is the mock recorder for MockIQueryService.
type MockIQueryServiceMockRecorder[TQuery any, TResult any] struct {
	mock *MockIQueryService[TQuery, TResult]
}

// NewMockIQueryService creates a new mock instance.
func NewMockIQueryService[TQuery any, TResult any](ctrl *gomock.Controller) *MockIQueryService[TQuery, TResult] {
	mock := &MockIQueryService[TQuery, TResult]{ctrl: ctrl}
	mock.recorder = &MockIQueryServiceMockRecorder[TQuery, TResult]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueryService[TQuery, TResult]) EXPECT() *MockIQueryServiceMockRecorder[TQuery, TResult] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIQueryService[TQuery, TResult]) Execute(query TQuery) TResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", query)
	ret0, _ := ret[0].(TResult)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIQueryServiceMockRecorder[TQuery, TResult]) Execute(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIQueryService[TQuery, TResult])(nil).Execute), query)
}

// MockIQueryServiceNoInput is a mock of IQueryServiceNoInput interface.
type MockIQueryServiceNoInput[TResult any] struct {
	ctrl     *gomock.Controller
	recorder *MockIQueryServiceNoInputMockRecorder[TResult]
}

// MockIQueryServiceNoInputMockRecorder is the mock recorder for MockIQueryServiceNoInput.
type MockIQueryServiceNoInputMockRecorder[TResult any] struct {
	mock *MockIQueryServiceNoInput[TResult]
}

// NewMockIQueryServiceNoInput creates a new mock instance.
func NewMockIQueryServiceNoInput[TResult any](ctrl *gomock.Controller) *MockIQueryServiceNoInput[TResult] {
	mock := &MockIQueryServiceNoInput[TResult]{ctrl: ctrl}
	mock.recorder = &MockIQueryServiceNoInputMockRecorder[TResult]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueryServiceNoInput[TResult]) EXPECT() *MockIQueryServiceNoInputMockRecorder[TResult] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIQueryServiceNoInput[TResult]) Execute() TResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(TResult)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIQueryServiceNoInputMockRecorder[TResult]) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIQueryServiceNoInput[TResult])(nil).Execute))
}
